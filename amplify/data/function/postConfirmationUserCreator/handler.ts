import { DynamoDBClient } from "@aws-sdk/client-dynamodb";
import { DynamoDBDocumentClient, PutCommand } from "@aws-sdk/lib-dynamodb";
import { v4 as uuidv4 } from 'uuid';

const client = new DynamoDBClient({});
const ddbDocClient = DynamoDBDocumentClient.from(client);

export const handler = async (event: any) => {
  console.log("Post Confirmation Trigger received event:", JSON.stringify(event, null, 2));

  if (event.triggerSource === "PostConfirmation_ConfirmSignUp") {
    const { email, given_name, family_name } = event.request.userAttributes;
    const username = event.userName;
    const ageRange = event.request.userAttributes['custom:ageRange'];
    const nationality = event.request.userAttributes['custom:nationality'];
    const zipCode = event.request.userAttributes['custom:zipCode'];
    const profession = event.request.userAttributes['custom:profession'];
    const employerSize = event.request.userAttributes['custom:employerSize'];

    const userItem = {
      // PK: `USER#${email}`, // DynamoDB partition key
      // SK: `USER#${email}`, // DynamoDB sort key (if needed, otherwise same as PK)
      username: username,
      firstName: given_name,
      lastName: family_name,
      email: email,
      ageRange: ageRange || undefined,
      nationality: nationality || undefined,
      createdAt: new Date().toISOString(),
      userId: uuidv4(),
      zipCode: zipCode || undefined,
      profession: profession || undefined,
      employerSize: employerSize || undefined,
    };

    // The table name is typically in the format of <AppSyncApiName>-<StackName>-<TableName>
    // or generated by Amplify (e.g., Users-xxxxxxxx-dev)
    // For now, let's assume it's directly accessible.
    // In a real Amplify setup, you'd likely get the table name from environment variables
    // or by importing from the Amplify-generated backend config.
    // For now, let's construct the table name based on common Amplify patterns.
    const tableName = process.env.TABLE_USERS; 

    if (!tableName) {
      console.error("TABLE_USERS environment variable is not set.");
      throw new Error("TABLE_USERS environment variable is not set.");
    }

    try {
      await ddbDocClient.send(new PutCommand({
        TableName: tableName,
        Item: userItem,
      }));
      console.log("User successfully created in DynamoDB:", userItem);
    } catch (error) {
      console.error("Error creating user in DynamoDB:", error);
      throw new Error("Failed to create user in DynamoDB.");
    }
  }

  return event; // Important: Always return the event object from a Lambda trigger
}; 